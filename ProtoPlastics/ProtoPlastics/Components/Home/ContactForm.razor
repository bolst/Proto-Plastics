@namespace ProtoPlastics.Components
@inject NavigationManager navManager

<Grid RowColumns="RowColumns.Are2.OnTablet.Are1.OnMobile" Padding="Padding.Is4.FromBottom.OnTablet">
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile" Margin="Margin.IsAuto" Padding="Padding.Is4">
        <Row TextAlignment="TextAlignment.Center" Margin="Margin.IsAuto" Padding="Padding.Is4.OnY">
            @ContactItemRF(IconName.MapMarkerAlt, Api.Content.Address.FullAddress(), mapsLink)
        </Row>
        <Row TextAlignment="TextAlignment.Center" Margin="Margin.IsAuto" Padding="Padding.Is4.OnY">
            @ContactItemRF(IconName.Phone, Api.Content.Phone.Number, Api.Content.Phone.HTMLRef)
        </Row>
        @* <Row TextAlignment="TextAlignment.Center" Margin="Margin.IsAuto" Padding="Padding.Is4.OnY">
        @ContactItemRF(IconName.Mail, Api.Content.Email.Address, Api.Content.Email.HTMLRef)
        </Row> *@
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnTablet.Is12.OnMobile" Background="Background.Dark" Padding="Padding.Is4">
        <Row><br></Row>

        @if (EmailIsSent)
        {
            <Row>
                <Lead TextColor="TextColor.White">Thank you! Your message has been sent and we will respond as soon as
                    possible.
                    <Icon Name="IconName.Smile" />
                </Lead>
            </Row>
        }
        else
        {
            <Row>
                <DisplayHeading Size="DisplayHeadingSize.Is4" TextColor="TextColor.White">CONTACT US</DisplayHeading>
            </Row>
            <Row>
                <Form>
                    <Validations @ref="validations" Mode="ValidationMode.Manual">
                        <Field>
                            <FieldBody>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    <TextEdit Placeholder="Name" @bind-Text="@inputName" />
                                </Validation>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <Validation Validator="ValidationRule.IsEmail">
                                    <TextEdit Placeholder="Email" @bind-Text="@inputEmail" />
                                </Validation>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <Validation Validator="@ValidationRule.IsNotEmpty">
                                    <TextEdit Placeholder="Subject" @bind-Text="@inputSubject" />
                                </Validation>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <Validation Validator="ValidationRule.IsNotEmpty">
                                    <MemoEdit Placeholder="Message" Rows="5" ReplaceTab TabSize="4"
                                        @bind-Text="@inputMessage" />
                                </Validation>
                            </FieldBody>
                        </Field>
                        <Field>
                            <Button Color="Color.Primary" Clicked="@OnClickedSubmit" Loading="@isLoading">Submit</Button>
                        </Field>
                    </Validations>
                </Form>
            </Row>
        }
        <Row><br></Row>
    </Column>
</Grid>



@code {

    bool EmailIsSent = false;
    bool isLoading = false;

    RenderFragment ContactItemRF(IconName iconName, string body, string to) => __builder =>
    {
        <Blazorise.Link To="@to" Target="Target.Blank" Unstyled>
            <Lead TextOverflow="TextOverflow.Wrap" Margin="Margin.IsAuto" TextSize="TextSize.ExtraLarge">
                <Icon Name="@iconName" IconSize="IconSize.Large" /> &nbsp @body
            </Lead>
        </Blazorise.Link>
    };

    string mapsLink =
    "https://www.google.com/maps/place/Proto+Plastics+Canada+Ltd/@42.2350196,-82.9764213,16z/data=!3m1!4b1!4m6!3m5!1s0x883b290e2ed510b3:0x585ddd600b120f6f!8m2!3d42.2350196!4d-82.9738464!16s%2Fg%2F1tdl6sy0?entry=ttu";
    string inputSubject { get; set; } = "";
    ValidationStatus isNameValid { get; set; } = ValidationStatus.Success;
    string inputName { get; set; } = "";
    string inputEmail { get; set; } = "";
    string inputMessage { get; set; } = "";

    Validations? validations;

    async Task OnClickedSubmit()
    {
        if (await validations!.ValidateAll())
        {

            bool status = Api.SendEmailService.Instance().Call(inputName, inputEmail, inputSubject, inputMessage);
            if (status)
            {
                EmailIsSent = true;
            }

            await Task.Delay(3000);
            navManager.NavigateTo("/", true);
        }
    }
}
